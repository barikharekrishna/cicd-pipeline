service:
  annotations: {}
  labels: {}
  enabled: "true"
  ports:
    port: 80

hpa:
  enabled: "false"
  max_replicas: 5
  min_replicas: 1
  target_cpu_utilization: 70
  target_memory_utilization: 70
  stabilization_window_seconds_scale_down: 300
  stabilization_window_seconds_scale_up: 0

workload:
 pdb:
  enabled: "false"
  max_Unavailable: 1
  minAvailable: {}

deployment:
  replicas: 2
  workload_identity_google_service_account: ""
  annotations: {}
  labels: {}
  template_metadata:
    labels: {}
    annotations: {}
  deploy_spec:
    registry_secret: ""
    termination_grace_period: 30
  volumes:
    - name: warden-lens-iap
      secret:
        name: warden-lens-iap
  strategy:
    type: "RollingUpdate"
    max_Surge: "25%"
    max_Unavailable: "25%"
  dns_config:
    searches: []
  app_container:
    image:
      repository: "asia.gcr.io/systems-0001"
      pull_policy: "IfNotPresent"
      name: "warden"
      tag: "1.0.0-ee687b0abcc659e3a98a19c7557dde3867a2d8ba"
    command: []
    args:
    - bundle
    - exec
    - rails
    - s
    - -b
    - 0.0.0.0
    - -p
    - "8080"
    working_dir: ""
    ports:
      name: "http"
      containerPort:  8080
    env: {}
    env_from:
      name: "warden"
    volume_mounts: []
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 4000m
        memory: 16Gi
    startup_probe:
      enabled: "false"
      path: "/ping"
      initial_delay_seconds: 5
      period_seconds: 10
      timeout_seconds: 3
      failure_threshold: 30
      success_threshold: 1
    liveness_probe:
      enabled: "true"
      path: "/ping"
      initial_delay_seconds: 5
      period_seconds: 10
      timeout_seconds: 1
      failure_threshold: 3
      success_threshold: 1
    readiness_probe:
      enabled: "true"
      path: "/ping"
      initial_delay_seconds: 5
      period_seconds: 2
      timeout_seconds: 1
      failure_threshold: 3
      success_threshold: 1
    post_start_hook:
      enabled: “false”
      httpGet:
        path: “/post-start-hook”
    pre_stop_hook:
      enabled: “false”
      httpGet:
        path: “/pre-stop-hook”
  sidecars:
  - name: iap-sidecar
    image:
      repository: gojektech
      name: iap-auth
      tag: 0.1.0-99f7459df4481772d30176e3b39b3857cd538745
      pull_policy: IfNotPresent
    ports:
    - containerPort: 8081
      name: http
    env:
      REFRESH_TIME_SECONDS: 3590s
      SERVICE_ACCOUNT_CREDENTIALS: /etc/iap_auth/sa.json
      IAP_HOST: https://lens.golabs.io
      CLIENT_ID: 361985166245-g68qs42ld4qcpfl9muvg8csaof93h47v.apps.googleusercontent.com
      LOGGER_LEVEL: error
      PORT: "8081"
    volume_mounts:
    - mount_path: /etc/iap_auth
      name: warden-lens-iap
    resources: {}
    liveness_probe:
      path: "/ping"
      port: 8081
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readiness_probe:
      path: "/ping"
      port: 8081
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1

ingress:
  enabled: "true"
  path:
    name: "/"
    enabled: false
  hostName: internal.go-cloud.golabs.io
  ingressClassName: nginx
  additionalHostNames:
  - go-cloud.golabs.io
  tls:
    enabled: false
    secretName: example.com

configmap:
  name: "warden"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation


global:
  app_name: "warden"
  proc_name: ""
  deployment_id: ""
  proc_type: ""
  namespace: "default"
  environment: "production"
  product_group_id: "3595e1ca-468b-455c-83f4-e182beff795c"
  team_id: "c2f7f061-07ad-4533-8f14-a3d4e45ff37a"
  app_namespace_id: ""
  app_id: ""
  package_version: ""
  app_release: ""

jobs:
- name: warden
  image:
    name: warden
    tag: "1.0.0-ee687b0abcc659e3a98a19c7557dde3867a2d8ba"
  args:
    - bundle
    - exec
    - rake
    - db:migrate
